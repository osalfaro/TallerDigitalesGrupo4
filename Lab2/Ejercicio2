--FullAdder

library IEEE;
use IEEE.STD_LOGIC_1164.ALL;

entity FullAdder is
    Port ( x : in STD_LOGIC;
           y : in STD_LOGIC;
           cin : in STD_LOGIC;
           cout : out STD_LOGIC;
           sum : out STD_LOGIC);
end FullAdder;

architecture Behavioral of FullAdder is

begin
    sum <= x xor cin xor y; 
    cout <= (x and y) or (y and cin) or (x and cin);  

end Behavioral;

--Adder_4_Bits

library IEEE;
use IEEE.STD_LOGIC_1164.ALL;

entity Adder_4_bits is
    Port ( A : in STD_LOGIC_VECTOR (3 downto 0);
           B : in STD_LOGIC_VECTOR (3 downto 0);
           Ci : in STD_LOGIC;
           S : out STD_LOGIC_VECTOR (3 downto 0);
           Co : out STD_LOGIC);
end Adder_4_bits;

architecture desarrollo_arquitectura of Adder_4_bits is

component FullAdder
    Port ( x : in STD_LOGIC;
           y : in STD_LOGIC;
           cin : in STD_LOGIC;
           cout : out STD_LOGIC;
           sum : out STD_LOGIC);
end component;

signal C : std_logic_vector (3 downto 1);

begin

FA0 : FullAdder port map (A(0),B(0),Ci,C(1),S(0));
FA1 : FullAdder port map (A(1),B(1),C(1),C(2),S(1));
FA2 : FullAdder port map (A(2),B(2),C(2),C(3),S(2));
FA3 : FullAdder port map (A(3),B(3),C(3),Co,S(3));

end desarrollo_arquitectura;

--Sim_Adder_4_Bits

library IEEE;
use IEEE.STD_LOGIC_1164.ALL;

entity Sim_Adder_4_Bits is
end Sim_Adder_4_Bits;

architecture Behavioral of Sim_Adder_4_Bits is

    COMPONENT Adder_4_Bits 
    PORT (
          A : IN std_logic_vector (3 downto 0);
          B : IN std_logic_vector (3 downto 0);
          Ci : IN std_logic;
          S : OUT std_logic_vector (3 downto 0);
          Co : OUT std_logic
          );
    END COMPONENT;
    
--Inputs
 
signal A : std_logic_vector (3 downto 0) := (others => '0');
signal B : std_logic_vector (3 downto 0) := (others => '0');
signal Ci : std_logic := '0';
    
-- Outputs

signal S : std_logic_vector (3 downto 0);
signal Co : std_logic;

constant period : time := 10 ns;
    
begin

   uut: Adder_4_bits PORT MAP (
            A => A,
            B => B,
            Ci => Ci,
            S => S,
            Co => Co
            );
            
    stim_proc: process
    begin
    
        A <= "1010";
        B <= "0101";
        Ci <= '0';
        
        wait for period;
        A <= "1001";
        B <= "0001";
        
        wait for period;
        A <= "0111";
        B <= "0111";
        
        wait for period;
        A <= "1111";
        B <= "1111";
        
        wait for period;
        A <= "0000";
        B <= "0000";
        
        
        wait;
    end process;
