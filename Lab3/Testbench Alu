module TestBench( );
logic [3:0] ALUA, ALUB;
logic ALUFlagIn;
logic [3:0] ALUControl;
//logic ALUFlags [3:0];
logic ALUResult [3:0];

Alu #(4) dut(ALUA,ALUB,ALUFlagIn,ALUControl,ALUResult);

initial begin
//SUMA
ALUA=4; ALUB=2; ALUFlagIn=0; ALUControl=0; #10;
assert (ALUResult === 6) else $error("000 failed."); 
ALUA=7; ALUB=2; ALUFlagIn=0; ALUControl=0; #10;
assert (ALUResult === 9) else $error("000 failed."); 
ALUA=8; ALUB=5; ALUFlagIn=0; ALUControl=0; #10;
assert (ALUResult === 4'hd) else $error("000 failed."); 
ALUA=2; ALUB=1; ALUFlagIn=0; ALUControl=0; #10;
assert (ALUResult === 3) else $error("000 failed."); 
//RESTA
ALUA=4; ALUB=2; ALUFlagIn=0; ALUControl=1; #10;
assert (ALUResult === 2) else $error("001 failed."); 
ALUA=7; ALUB=2; ALUFlagIn=0; ALUControl=1; #10;
assert (ALUResult === 5) else $error("001 failed."); 
ALUA=8; ALUB=5; ALUFlagIn=0; ALUControl=1; #10;
assert (ALUResult === 3) else $error("001 failed."); 
ALUA=2; ALUB=1; ALUFlagIn=0; ALUControl=1; #10;
assert (ALUResult === 1) else $error("001 failed."); 
//INCREMENTO a A
ALUA=4; ALUB=2; ALUFlagIn=0; ALUControl=2; #10;
assert (ALUResult === 5) else $error("002 failed.");
ALUA=7; ALUB=2; ALUFlagIn=0; ALUControl=2; #10;
assert (ALUResult === 8) else $error("002 failed.");
ALUA=8; ALUB=5; ALUFlagIn=0; ALUControl=2; #10;
assert (ALUResult === 9) else $error("002 failed.");
ALUA=2; ALUB=1; ALUFlagIn=0; ALUControl=2; #10;
assert (ALUResult === 3) else $error("002 failed.");
//INCREMENTO a B
ALUA=4; ALUB=2; ALUFlagIn=1; ALUControl=2; #10;
assert (ALUResult === 3) else $error("003 failed.");
ALUA=7; ALUB=2; ALUFlagIn=1; ALUControl=2; #10;
assert (ALUResult === 3) else $error("003 failed.");
ALUA=8; ALUB=5; ALUFlagIn=1; ALUControl=2; #10;
assert (ALUResult === 6) else $error("003 failed.");
ALUA=2; ALUB=1; ALUFlagIn=1; ALUControl=2; #10;
assert (ALUResult === 2) else $error("003 failed.");
//DECREMENTO a A
ALUA=4; ALUB=2; ALUFlagIn=0; ALUControl=3; #10;
assert (ALUResult === 3) else $error("004 failed.");
ALUA=7; ALUB=2; ALUFlagIn=0; ALUControl=3; #10;
assert (ALUResult === 6) else $error("004 failed.");
ALUA=8; ALUB=5; ALUFlagIn=0; ALUControl=3; #10;
assert (ALUResult === 7) else $error("004 failed.");
ALUA=2; ALUB=1; ALUFlagIn=0; ALUControl=3; #10;
assert (ALUResult === 1) else $error("004 failed.");
//DECREMENTO a B
ALUA=4; ALUB=2; ALUFlagIn=1; ALUControl=3; #10
assert (ALUResult === 1) else $error("005 failed.");
ALUA=7; ALUB=2; ALUFlagIn=1; ALUControl=3; #10
assert (ALUResult === 1) else $error("005 failed.");
ALUA=8; ALUB=5; ALUFlagIn=1; ALUControl=3; #10
assert (ALUResult === 4) else $error("005 failed.");
ALUA=2; ALUB=1; ALUFlagIn=1; ALUControl=3; #10
assert (ALUResult === 0) else $error("005 failed.");

ALUFlagIn=0; ALUControl=4; #10;
assert (ALUResult === 'bz) else $error("006 failed.");

ALUControl=5; #10;
assert (ALUResult === 'bz) else $error("007 failed.");

ALUControl=6; #10;
assert (ALUResult === 'bz) else $error("008 failed.");

ALUControl=7; #10;
assert (ALUResult === 'bz) else $error("009 failed.");

//AND
ALUA=4; ALUB=2; ALUControl=8; #10
assert (ALUResult === 0) else $error("010 failed.");
ALUA=7; ALUB=2; ALUControl=8; #10
assert (ALUResult === 2) else $error("005 failed.");
ALUA=8; ALUB=5; ALUControl=8; #10
assert (ALUResult === 0) else $error("005 failed.");
ALUA=2; ALUB=1; ALUControl=8; #10
assert (ALUResult === 0) else $error("005 failed.");
//OR
ALUA=4; ALUB=2; ALUControl=9; #10
assert (ALUResult === 6) else $error("011 failed.");
ALUA=7; ALUB=2; ALUControl=9; #10
assert (ALUResult === 7) else $error("011 failed.");
ALUA=8; ALUB=5; ALUControl=9; #10
assert (ALUResult === 4'hd) else $error("011 failed.");
ALUA=2; ALUB=1; ALUControl=9; #10
assert (ALUResult === 3) else $error("011 failed.");
//NOT A
ALUA=4; ALUB=2; ALUFlagIn=0; ALUControl=10; #10
assert (ALUResult === 4'hb) else $error("012 failed.");
ALUA=7; ALUB=2; ALUFlagIn=0; ALUControl=10; #10
assert (ALUResult === 8) else $error("012 failed.");
ALUA=8; ALUB=5; ALUFlagIn=0; ALUControl=10; #10
assert (ALUResult === 7) else $error("012 failed.");
ALUA=2; ALUB=1; ALUFlagIn=0; ALUControl=10; #10
assert (ALUResult === 4'hd) else $error("012 failed.");
//NOT B
ALUA=4; ALUB=2; ALUFlagIn=1; ALUControl=10; #10
assert (ALUResult === 4'hd) else $error("013 failed.");
ALUA=7; ALUB=2; ALUFlagIn=1; ALUControl=10; #10
assert (ALUResult === 4'hd) else $error("013 failed.");
ALUA=8; ALUB=5; ALUFlagIn=1; ALUControl=10; #10
assert (ALUResult === 4'ha) else $error("013 failed.");
ALUA=2; ALUB=1; ALUFlagIn=1; ALUControl=10; #10
assert (ALUResult === 4'he) else $error("013 failed.");
//XOR
ALUA=4; ALUB=2; ALUFlagIn=0; ALUControl=11; #10
assert (ALUResult === 6) else $error("014 failed.");
ALUA=7; ALUB=2; ALUFlagIn=0; ALUControl=11; #10
assert (ALUResult === 5) else $error("014 failed.");
ALUA=8; ALUB=5; ALUFlagIn=0; ALUControl=11; #10
assert (ALUResult === 4'hd) else $error("014 failed.");
ALUA=2; ALUB=1; ALUFlagIn=0; ALUControl=11; #10
assert (ALUResult === 3) else $error("014 failed.");
//Shift Left 0
ALUA=4; ALUB=2; ALUFlagIn=0; ALUControl=12; #10
assert (ALUResult === 8) else $error("015 failed.");
ALUA=7; ALUB=2; ALUFlagIn=0; ALUControl=12; #10
assert (ALUResult === 4'he) else $error("015 failed.");
ALUA=8; ALUB=5; ALUFlagIn=0; ALUControl=12; #10
assert (ALUResult === 0) else $error("015 failed.");
ALUA=2; ALUB=1; ALUFlagIn=0; ALUControl=12; #10
assert (ALUResult === 4) else $error("015 failed.");
//Shift Left 1
ALUA=4; ALUB=2; ALUFlagIn=1; ALUControl=12; #10
assert (ALUResult === 9) else $error("016 failed.");
ALUA=7; ALUB=2; ALUFlagIn=1; ALUControl=12; #10
assert (ALUResult === 4'hf) else $error("016 failed.");
ALUA=8; ALUB=5; ALUFlagIn=1; ALUControl=12; #10
assert (ALUResult === 1) else $error("016 failed.");
ALUA=2; ALUB=1; ALUFlagIn=1; ALUControl=12; #10
assert (ALUResult === 5) else $error("016 failed.");
//Shift Right 0
ALUA=4; ALUB=2; ALUFlagIn=0; ALUControl=13; #10
assert (ALUResult === 2) else $error("017 failed.");
ALUA=7; ALUB=2; ALUFlagIn=0; ALUControl=13; #10
assert (ALUResult === 3) else $error("017 failed.");
ALUA=8; ALUB=5; ALUFlagIn=0; ALUControl=13; #10
assert (ALUResult === 4) else $error("017 failed.");
ALUA=2; ALUB=1; ALUFlagIn=0; ALUControl=13; #10
assert (ALUResult === 1) else $error("017 failed.");

//Shift Right 1
ALUA=4; ALUB=2; ALUFlagIn=1; ALUControl=13; #10
assert (ALUResult === 4'ha) else $error("018 failed.");
ALUA=7; ALUB=2; ALUFlagIn=1; ALUControl=13; #10
assert (ALUResult === 4'hb) else $error("018 failed.");
ALUA=8; ALUB=5; ALUFlagIn=1; ALUControl=13; #10
assert (ALUResult === 4'hc) else $error("018 failed.");
ALUA=2; ALUB=1; ALUFlagIn=1; ALUControl=13; #10
assert (ALUResult === 9) else $error("018 failed.");

end 

endmodule
