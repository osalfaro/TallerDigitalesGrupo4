module principal(
    input logic clk,
    input logic [1:0] cuadrante,
    output logic Hsync,
    output logic Vsync,
    output logic [3:0] Red,
    output logic [3:0] Green,
    output logic [3:0] Blue 
    );
    
    wire clk25Mhz;
    wire enableVcounter;
    wire [15:0] contadorHorizontal;
    wire [15:0] contadorVertical;
    
    DivisorFrecuencia divisor(clk,clk25Mhz); //Instanciar
    contadorHorizontal horizontal(clk25Mhz,enableVcounter,contadorHorizontal);
    contadorVertical vertical(clk25Mhz,enableVcounter,contadorVertical);
    
    //salidas
    assign Hsync = (contadorHorizontal<96) ? 1:0;
    assign Vsync = (contadorVertical<2) ? 1:0;
    
    //dimensiones
    integer limite_x1 = 144;
    integer limite_x2 =464;
    integer limite_x3 =784;
    
    integer limite_y1 = 35;
    integer limite_y2 = 275;
    integer limite_y3 =515;
    
    //Colores
    logic [3:0] color =4'hF;
    
    always_comb
    begin
    
    case(cuadrante)
        2'b00:
            begin
            Red = (contadorHorizontal <limite_x2 && contadorHorizontal >=limite_x1 && contadorVertical <limite_y2 && contadorVertical >=limite_y1) ? color:0;
            Green = (contadorHorizontal <limite_x2 && contadorHorizontal >=limite_x1 && contadorVertical <limite_y2 && contadorVertical >=limite_y1) ? color:0;
            Blue = (contadorHorizontal <limite_x2 && contadorHorizontal >=limite_x1 && contadorVertical <limite_y2 && contadorVertical >=limite_y1) ? color:0;   
            end
        2'b01:
            begin
            Red = (contadorHorizontal <limite_x3 && contadorHorizontal >=limite_x2 && contadorVertical <limite_y2 && contadorVertical >=limite_y1) ? color:0;
            Green = (contadorHorizontal <limite_x3 && contadorHorizontal >=limite_x2 && contadorVertical <limite_y2 && contadorVertical >=limite_y1) ? color:0;
            Blue = (contadorHorizontal <limite_x3 && contadorHorizontal >=limite_x2 && contadorVertical <limite_y2 && contadorVertical >=limite_y1) ? color:0;   
            end
        2'b10:
            begin
            Red = (contadorHorizontal <limite_x2 && contadorHorizontal >=limite_x1 && contadorVertical <limite_y3 && contadorVertical >=limite_y2) ? color:0;
            Green = (contadorHorizontal <limite_x2 && contadorHorizontal >=limite_x1 && contadorVertical <limite_y3 && contadorVertical >=limite_y2) ? color:0;
            Blue = (contadorHorizontal <limite_x2 && contadorHorizontal >=limite_x1 && contadorVertical <limite_y3 && contadorVertical >=limite_y2) ? color:0;   
            end
        2'b11:
            begin
            Red = (contadorHorizontal <limite_x3 && contadorHorizontal >=limite_x2 && contadorVertical <limite_y3 && contadorVertical >=limite_y2) ? color:0;
            Green = (contadorHorizontal <limite_x3 && contadorHorizontal >=limite_x2 && contadorVertical <limite_y3 && contadorVertical >=limite_y2) ? color:0;
            Blue = (contadorHorizontal <limite_x3 && contadorHorizontal >=limite_x2 && contadorVertical <limite_y3 && contadorVertical >=limite_y2) ? color:0;  
            end
    
    endcase
    end
endmodule
