module principal(
    input logic clk,
    input logic [1:0] cuadrante,
    output logic Hsync,
    output logic Vsync,
    output logic [3:0] Red,
    output logic [3:0] Green,
    output logic [3:0] Blue 
    );
    
    wire clk25Mhz;
    wire enableVcounter;
    wire [15:0] pix_x; //contadorHorizontal
    wire [15:0] pix_y; //contadorVertical
    
    DivisorFrecuencia divisor(clk,clk25Mhz); //Instanciar
    contadorHorizontal horizontal(clk25Mhz,enableVcounter,pix_x);
    contadorVertical vertical(clk25Mhz,enableVcounter,pix_y);
    
    wire clkMaquina;
    DivisorFrecuenciaMaquina Maquina(clk,clkMaquina);
    //salidas
    assign Hsync = (pix_x<96) ? 1:0;
    assign Vsync = (pix_y<2) ? 1:0;
    
    //dimensiones
    integer limite_x1 = 144;
    integer limite_x2 =464;
    integer limite_x3 =784;
    
    integer limite_y1 = 35;
    integer limite_y2 = 275;
    integer limite_y3 =515;
    
    //se usa una sola variable de 12 bits para los colores
    logic [11:0] RGB;
    assign Red = RGB[11:8];
    assign Green = RGB[7:4];
    assign Blue = RGB[3:0];
    
    wire clkanti;
    
    logic pushOut;
    
    logic [1:0] salidaMaquina;
    
    DivisorFrecuenciaAnti clkantirrebote(clk,clkanti);
    
    FF_D antirrebote(clkanti,reset,pushIn,pushOut);
    
    MaquinaEstados maq(pushOut,reset,clkMaquina,salidaMaquina);
    
    logic c1,c2,c3,c4; //variables de un bit que indican si el cuadrante esta activo (on/off)
    assign c1 = (pix_x <limite_x2 && pix_x >=limite_x1 && pix_y <limite_y2 && pix_y >=limite_y1);
    assign c2 = (pix_x <limite_x3 && pix_x >=limite_x2 && pix_y <limite_y2 && pix_y >=limite_y1);
    assign c3 = (pix_x <limite_x2 && pix_x >=limite_x1 && pix_y <limite_y3 && pix_y >=limite_y2);
    assign c4 = (pix_x <limite_x3 && pix_x >=limite_x2 && pix_y <limite_y3 && pix_y >=limite_y2);
    
    always_comb
    begin
    
    if (c1 & (cuadrante==2'b00|cuadrante==2'b01|cuadrante==2'b10|cuadrante==2'b11))
        begin
        RGB = 12'hFFF;
        end
    else if(c2 & (cuadrante==2'b01|cuadrante==2'b10|cuadrante==2'b11))
        begin
        RGB = 12'hF00;
        end
    else if(c3 & (cuadrante==2'b10|cuadrante==2'b11))
        begin
        RGB = 12'h0F0;
        end
    else if (c4 & (cuadrante==2'b11))
        begin
        RGB = 12'h00F;
        end
    else
        begin
        RGB= 12'h000;
        end
    
    end
endmodule
